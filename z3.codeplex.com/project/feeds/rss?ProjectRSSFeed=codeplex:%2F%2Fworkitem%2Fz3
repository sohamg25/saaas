<?xml version="1.0"?><?xml-stylesheet type="text/xsl" href="/rss.xsl"?><rss version="2.0"><channel><title>z3 Issue Tracker Rss Feed</title><link>https://z3.codeplex.com/workitem/list/basic</link><description>z3 Issue Tracker Rss Description</description><item><title>Closed Unassigned: Assert labels not freed on pops. [46]</title><link>http://z3.codeplex.com/workitem/46</link><description>Hi guys,&lt;br /&gt;&lt;br /&gt;I use z3 &amp;#40;4.3.1&amp;#41; with smt lib 2 input. A simple example follows. I admit the example seems pointless, but I noticed it when extrapolating a model of a formula in a variation of the QE algorithm by Monniaux using unsat core to try to further reduce the extrapolant when getting an unsat result &amp;#40;in a SMT-test-like algorithm where the atoms of the formula are removed one by one&amp;#58; generalize2 in http&amp;#58;&amp;#47;&amp;#47;www-verimag.imag.fr&amp;#47;&amp;#126;monniaux&amp;#47;biblio&amp;#47;Monniaux_LPAR08.pdf&amp;#41;.&lt;br /&gt;&lt;br /&gt;Of course, a simple workaround is to increment a counter to make sure that there is no collision between the labels, but it does feel like a bug doesn&amp;#39;t it&amp;#63;&lt;br /&gt;&lt;br /&gt;Thank you in advance.&lt;br /&gt;&lt;br /&gt;Adrien&lt;br /&gt;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#40;set-option &amp;#58;print-success true&amp;#41;&lt;br /&gt;&amp;#40;set-option &amp;#58;produce-unsat-cores true&amp;#41;&lt;br /&gt;&lt;br /&gt;&amp;#40;declare-fun a &amp;#40;&amp;#41; bool&amp;#41;&lt;br /&gt;&amp;#40;declare-fun b &amp;#40;&amp;#41; bool&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; a &amp;#58;named A&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; &amp;#40;not b&amp;#41; &amp;#58;named notB&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;check-sat&amp;#41;&lt;br /&gt;&amp;#59; sat&lt;br /&gt;&lt;br /&gt;&amp;#40;push 1&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; &amp;#40;not a&amp;#41; &amp;#58;named notA&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;check-sat&amp;#41;&lt;br /&gt;&amp;#59; unsat&lt;br /&gt;&amp;#40;get-unsat-core&amp;#41;&lt;br /&gt;&amp;#59; &amp;#40;A notA&amp;#41;&lt;br /&gt;&lt;br /&gt;&amp;#40;pop 1&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; &amp;#40;not a&amp;#41; &amp;#58;named notA&amp;#41;&amp;#41;&lt;br /&gt;&amp;#59; &amp;#40;error &amp;#34;line 19 column 20&amp;#58; named expression already defined&amp;#34;&amp;#41;&amp;#96;&lt;br /&gt;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;Comments: This is not a bug. You should use the option http&amp;#58;&amp;#47;&amp;#47;rise4fun.com&amp;#47;Z3&amp;#47;QlTr for getting the desired behavior</description><author>leodemoura</author><pubDate>Tue, 11 Jun 2013 20:39:19 GMT</pubDate><guid isPermaLink="false">Closed Unassigned: Assert labels not freed on pops. [46] 20130611083919P</guid></item><item><title>Commented Unassigned: Assert labels not freed on pops. [46]</title><link>http://z3.codeplex.com/workitem/46</link><description>Hi guys,&lt;br /&gt;&lt;br /&gt;I use z3 &amp;#40;4.3.1&amp;#41; with smt lib 2 input. A simple example follows. I admit the example seems pointless, but I noticed it when extrapolating a model of a formula in a variation of the QE algorithm by Monniaux using unsat core to try to further reduce the extrapolant when getting an unsat result &amp;#40;in a SMT-test-like algorithm where the atoms of the formula are removed one by one&amp;#58; generalize2 in http&amp;#58;&amp;#47;&amp;#47;www-verimag.imag.fr&amp;#47;&amp;#126;monniaux&amp;#47;biblio&amp;#47;Monniaux_LPAR08.pdf&amp;#41;.&lt;br /&gt;&lt;br /&gt;Of course, a simple workaround is to increment a counter to make sure that there is no collision between the labels, but it does feel like a bug doesn&amp;#39;t it&amp;#63;&lt;br /&gt;&lt;br /&gt;Thank you in advance.&lt;br /&gt;&lt;br /&gt;Adrien&lt;br /&gt;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#40;set-option &amp;#58;print-success true&amp;#41;&lt;br /&gt;&amp;#40;set-option &amp;#58;produce-unsat-cores true&amp;#41;&lt;br /&gt;&lt;br /&gt;&amp;#40;declare-fun a &amp;#40;&amp;#41; bool&amp;#41;&lt;br /&gt;&amp;#40;declare-fun b &amp;#40;&amp;#41; bool&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; a &amp;#58;named A&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; &amp;#40;not b&amp;#41; &amp;#58;named notB&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;check-sat&amp;#41;&lt;br /&gt;&amp;#59; sat&lt;br /&gt;&lt;br /&gt;&amp;#40;push 1&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; &amp;#40;not a&amp;#41; &amp;#58;named notA&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;check-sat&amp;#41;&lt;br /&gt;&amp;#59; unsat&lt;br /&gt;&amp;#40;get-unsat-core&amp;#41;&lt;br /&gt;&amp;#59; &amp;#40;A notA&amp;#41;&lt;br /&gt;&lt;br /&gt;&amp;#40;pop 1&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; &amp;#40;not a&amp;#41; &amp;#58;named notA&amp;#41;&amp;#41;&lt;br /&gt;&amp;#59; &amp;#40;error &amp;#34;line 19 column 20&amp;#58; named expression already defined&amp;#34;&amp;#41;&amp;#96;&lt;br /&gt;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;Comments: You should use the option &amp;#40;set-option &amp;#58;global-decls false&amp;#41;&amp;#10;Then, all &amp;#34;names&amp;#34; and declarations will be scoped.&amp;#10;&amp;#10;Here is the updated example&amp;#58; http&amp;#58;&amp;#47;&amp;#47;rise4fun.com&amp;#47;Z3&amp;#47;QlTr&amp;#10;</description><author>leodemoura</author><pubDate>Tue, 11 Jun 2013 20:38:52 GMT</pubDate><guid isPermaLink="false">Commented Unassigned: Assert labels not freed on pops. [46] 20130611083852P</guid></item><item><title>Created Unassigned: assertion violation: s.m_qhead == s.m_trail.size() [47]</title><link>http://z3.codeplex.com/workitem/47</link><description>Version&amp;#58;&lt;br /&gt;End of master branch built with Z3DEBUG&amp;#61;1 and _EXTERNAL_RELEASE&amp;#61;1, plus cherry-picked changes&amp;#58;&lt;br /&gt;https&amp;#58;&amp;#47;&amp;#47;z3.codeplex.com&amp;#47;SourceControl&amp;#47;changeset&amp;#47;110fa0b7fb711418fe2be67f033e8ed70b354972&lt;br /&gt;https&amp;#58;&amp;#47;&amp;#47;z3.codeplex.com&amp;#47;SourceControl&amp;#47;changeset&amp;#47;f4f1c63abb4a6fd0df908e376b0ab014bce3d9da&lt;br /&gt;&lt;br /&gt;Reproduces independently of cherry picked changes, but does depend on _EXTERNAL_RELEASE being defined.&lt;br /&gt;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;ASSERTION VIOLATION&lt;br /&gt;File&amp;#58; ..&amp;#47;src&amp;#47;sat&amp;#47;sat_asymm_branch.cpp&lt;br /&gt;Line&amp;#58; 79&lt;br /&gt;s.m_qhead &amp;#61;&amp;#61; s.m_trail.size&amp;#40;&amp;#41;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;&lt;br /&gt;Problematic input&amp;#58;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;&amp;#40;set-logic QF_BV&amp;#41;&lt;br /&gt;&amp;#40;define-sort bv64 &amp;#40;&amp;#41; &amp;#40;_ BitVec 64&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;declare-fun chartab_addr&amp;#33;56 &amp;#40;&amp;#41; bv64&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;58 &amp;#40;&amp;#41; bv64 &amp;#40;bvadd chartab_addr&amp;#33;56 &amp;#35;x0000000000000100&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;65 &amp;#40;&amp;#41; Bool &amp;#40;bvule chartab_addr&amp;#33;56 tmp&amp;#33;58&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;assert tmp&amp;#33;65&amp;#41;&lt;br /&gt;&amp;#40;declare-fun str_addr&amp;#33;12 &amp;#40;&amp;#41; bv64&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;66 &amp;#40;&amp;#41; Bool &amp;#40;bvult tmp&amp;#33;58 str_addr&amp;#33;12&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;assert tmp&amp;#33;66&amp;#41;&lt;br /&gt;&amp;#40;declare-fun _param_1_addr&amp;#33;10 &amp;#40;&amp;#41; bv64&amp;#41;&lt;br /&gt;&amp;#40;declare-fun p_addr&amp;#33;31 &amp;#40;&amp;#41; bv64&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;69 &amp;#40;&amp;#41; Bool &amp;#40;bvult _param_1_addr&amp;#33;10 p_addr&amp;#33;31&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;assert tmp&amp;#33;69&amp;#41;&lt;br /&gt;&amp;#40;define-sort bv32 &amp;#40;&amp;#41; &amp;#40;_ BitVec 32&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-sort bv8 &amp;#40;&amp;#41; &amp;#40;_ BitVec 8&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;declare-fun str_addr_12_D0_15_D0&amp;#33;50 &amp;#40;&amp;#41; bv8&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;52 &amp;#40;&amp;#41; bv32 &amp;#40;&amp;#40;_ zero_extend 24&amp;#41; str_addr_12_D0_15_D0&amp;#33;50&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;53 &amp;#40;&amp;#41; Bool &amp;#40;bvsge tmp&amp;#33;52 &amp;#35;x00000080&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;55 &amp;#40;&amp;#41; Bool &amp;#40;not tmp&amp;#33;53&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;assert tmp&amp;#33;55&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;59 &amp;#40;&amp;#41; bv64 &amp;#40;&amp;#40;_ zero_extend 56&amp;#41; str_addr_12_D0_15_D0&amp;#33;50&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;60 &amp;#40;&amp;#41; bv64 &amp;#40;bvadd chartab_addr&amp;#33;56 tmp&amp;#33;59&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;61 &amp;#40;&amp;#41; Bool &amp;#40;bvult tmp&amp;#33;60 chartab_addr&amp;#33;56&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;assert tmp&amp;#33;61&amp;#41;&lt;br /&gt;&amp;#40;check-sat&amp;#41;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;&lt;br /&gt;stack&amp;#58;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;&amp;#35;2  0x0000000000b2a416 in sat&amp;#58;&amp;#58;asymm_branch&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x7fffffffc8b0, force&amp;#61;false&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_asymm_branch.cpp&amp;#58;79&lt;br /&gt;&amp;#35;3  0x0000000000b0a22f in sat&amp;#58;&amp;#58;solver&amp;#58;&amp;#58;simplify_problem &amp;#40;this&amp;#61;0x7fffffffc418&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_solver.cpp&amp;#58;882&lt;br /&gt;&amp;#35;4  0x0000000000b0963f in sat&amp;#58;&amp;#58;solver&amp;#58;&amp;#58;check &amp;#40;this&amp;#61;0x7fffffffc418&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_solver.cpp&amp;#58;698&lt;br /&gt;&amp;#35;5  0x0000000000a17091 in sat_tactic&amp;#58;&amp;#58;imp&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x7fffffffc400, g&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;tactic&amp;#47;sat_tactic.cpp&amp;#58;70&lt;br /&gt;&amp;#35;6  0x0000000000a1787d in sat_tactic&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13bf778, g&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;tactic&amp;#47;sat_tactic.cpp&amp;#58;174&lt;br /&gt;&amp;#35;7  0x0000000000bdacf6 in cleanup_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13bf7c8, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;1206&lt;br /&gt;&amp;#35;8  0x0000000000bdb371 in cond_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13c0f68, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;1303&lt;br /&gt;&amp;#35;9  0x0000000000bd4dc6 in and_then_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13c4948, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;176&lt;br /&gt;&amp;#35;10 0x0000000000bd4dc6 in and_then_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13c4988, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;176&lt;br /&gt;&amp;#35;11 0x0000000000bdb371 in cond_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13c6198, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;1303&lt;br /&gt;&amp;#35;12 0x0000000000bdb335 in cond_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13c6218, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;1301&lt;br /&gt;&amp;#35;13 0x0000000000bd4dc6 in and_then_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13c6268, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;176&lt;br /&gt;&amp;#35;14 0x0000000000bd942a in unary_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13c62a8, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;989&lt;br /&gt;&amp;#35;15 0x0000000000be7864 in exec &amp;#40;t&amp;#61;..., in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactic.cpp&amp;#58;180&lt;br /&gt;&amp;#35;16 0x0000000000be7ad8 in check_sat &amp;#40;t&amp;#61;..., g&amp;#61;..., md&amp;#61;..., pr&amp;#61;..., core&amp;#61;..., reason_unknown&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactic.cpp&amp;#58;202&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;#40;gdb&amp;#41; p s.m_qhead&lt;br /&gt;&amp;#36;2 &amp;#61; 262&lt;br /&gt;&amp;#40;gdb&amp;#41; p s.m_trail.size&amp;#40;&amp;#41;&lt;br /&gt;&amp;#36;3 &amp;#61; 265&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;&lt;br /&gt;</description><author>dvitek</author><pubDate>Mon, 10 Jun 2013 21:00:46 GMT</pubDate><guid isPermaLink="false">Created Unassigned: assertion violation: s.m_qhead == s.m_trail.size() [47] 20130610090046P</guid></item><item><title>Edited Unassigned: Assert labels not freed on pops. [46]</title><link>http://z3.codeplex.com/workitem/46</link><description>Hi guys,&lt;br /&gt;&lt;br /&gt;I use z3 &amp;#40;4.3.1&amp;#41; with smt lib 2 input. A simple example follows. I admit the example seems pointless, but I noticed it when extrapolating a model of a formula in a variation of the QE algorithm by Monniaux using unsat core to try to further reduce the extrapolant when getting an unsat result &amp;#40;in a SMT-test-like algorithm where the atoms of the formula are removed one by one&amp;#58; generalize2 in http&amp;#58;&amp;#47;&amp;#47;www-verimag.imag.fr&amp;#47;&amp;#126;monniaux&amp;#47;biblio&amp;#47;Monniaux_LPAR08.pdf&amp;#41;.&lt;br /&gt;&lt;br /&gt;Of course, a simple workaround is to increment a counter to make sure that there is no collision between the labels, but it does feel like a bug doesn&amp;#39;t it&amp;#63;&lt;br /&gt;&lt;br /&gt;Thank you in advance.&lt;br /&gt;&lt;br /&gt;Adrien&lt;br /&gt;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#40;set-option &amp;#58;print-success true&amp;#41;&lt;br /&gt;&amp;#40;set-option &amp;#58;produce-unsat-cores true&amp;#41;&lt;br /&gt;&lt;br /&gt;&amp;#40;declare-fun a &amp;#40;&amp;#41; bool&amp;#41;&lt;br /&gt;&amp;#40;declare-fun b &amp;#40;&amp;#41; bool&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; a &amp;#58;named A&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; &amp;#40;not b&amp;#41; &amp;#58;named notB&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;check-sat&amp;#41;&lt;br /&gt;&amp;#59; sat&lt;br /&gt;&lt;br /&gt;&amp;#40;push 1&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; &amp;#40;not a&amp;#41; &amp;#58;named notA&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;check-sat&amp;#41;&lt;br /&gt;&amp;#59; unsat&lt;br /&gt;&amp;#40;get-unsat-core&amp;#41;&lt;br /&gt;&amp;#59; &amp;#40;A notA&amp;#41;&lt;br /&gt;&lt;br /&gt;&amp;#40;pop 1&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; &amp;#40;not a&amp;#41; &amp;#58;named notA&amp;#41;&amp;#41;&lt;br /&gt;&amp;#59; &amp;#40;error &amp;#34;line 19 column 20&amp;#58; named expression already defined&amp;#34;&amp;#41;&amp;#96;&lt;br /&gt;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;</description><author>DameNingen</author><pubDate>Sat, 08 Jun 2013 22:40:28 GMT</pubDate><guid isPermaLink="false">Edited Unassigned: Assert labels not freed on pops. [46] 20130608104028P</guid></item><item><title>Created Unassigned: Assert labels not freed on pops. [46]</title><link>http://z3.codeplex.com/workitem/46</link><description>Hi guys,&lt;br /&gt;&lt;br /&gt;I use z3 &amp;#40;4.3.1&amp;#41; with smt lib 2 input. A simple example follows. I admit the example seems pointless, but I noticed it when extrapolating a model of a formula in a variation of the QE algorithm by Monniaux using unsat core to try to further reduce the extrapolant when getting an unsat result &amp;#40;in a SMT-test-like algorithm where the atoms of the formula are removed one by one&amp;#58; generalize2 in http&amp;#58;&amp;#47;&amp;#47;www-verimag.imag.fr&amp;#47;&amp;#126;monniaux&amp;#47;biblio&amp;#47;Monniaux_LPAR08.pdf&amp;#41;.&lt;br /&gt;&lt;br /&gt;Of course, a simple workaround is to increment a counter to make sure that there is no collision between the labels, but it does feel like a bug doesn&amp;#39;t it&amp;#63;&lt;br /&gt;&lt;br /&gt;Thank you in advance.&lt;br /&gt;&lt;br /&gt;Adrien&lt;br /&gt;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#40;set-option &amp;#58;print-success true&amp;#41;&lt;br /&gt;&amp;#40;set-option &amp;#58;produce-unsat-cores true&amp;#41;&lt;br /&gt;&lt;br /&gt;&amp;#40;declare-fun a &amp;#40;&amp;#41; bool&amp;#41;&lt;br /&gt;&amp;#40;declare-fun b &amp;#40;&amp;#41; bool&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; a &amp;#58;named A&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; &amp;#40;not b&amp;#41; &amp;#58;named notB&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;check-sat&amp;#41;&lt;br /&gt;&amp;#59; sat&lt;br /&gt;&lt;br /&gt;&amp;#40;push 1&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; &amp;#40;not a&amp;#41; &amp;#58;named notA&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;check-sat&amp;#41;&lt;br /&gt;&amp;#59; unsat&lt;br /&gt;&amp;#40;get-unsat-core&amp;#41;&lt;br /&gt;&amp;#59; &amp;#40;A notB&amp;#41;&lt;br /&gt;&lt;br /&gt;&amp;#40;pop 1&amp;#41;&lt;br /&gt;&amp;#40;assert &amp;#40;&amp;#33; &amp;#40;not a&amp;#41; &amp;#58;named notA&amp;#41;&amp;#41;&lt;br /&gt;&amp;#59; &amp;#40;error &amp;#34;line 19 column 20&amp;#58; named expression already defined&amp;#34;&amp;#41;&amp;#96;&lt;br /&gt;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;</description><author>DameNingen</author><pubDate>Sat, 08 Jun 2013 22:39:25 GMT</pubDate><guid isPermaLink="false">Created Unassigned: Assert labels not freed on pops. [46] 20130608103925P</guid></item><item><title>Closed Issue: get-value side effect [31]</title><link>http://z3.codeplex.com/workitem/31</link><description>Hi Leo,&lt;br /&gt;&lt;br /&gt;Just wanted to let you know that &amp;#40;get-value &amp;#8230;&amp;#41; has a side effect, because it permanently enables model completion. So,&lt;br /&gt;&lt;br /&gt;&amp;#40;get-value &amp;#40;x&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;get-model&amp;#41;&lt;br /&gt;&lt;br /&gt;Will report a model that is different from&lt;br /&gt;&lt;br /&gt;&amp;#59; &amp;#40;get-value &amp;#40;x&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;get-model&amp;#41;&lt;br /&gt;&lt;br /&gt;Because model&amp;#58;&amp;#58;eval at model.cpp&amp;#58;131 permanently sets model completion to true. &lt;br /&gt;&lt;br /&gt;This is not really a problem, but could potentially confuse users a bit. So, doesn&amp;#8217;t really need a fix, I just wanted to point this out to you in case you&amp;#8217;d like to change the behavior. I guess we could work around it by creating a temporary copy of the model before it is completed&amp;#8230;&lt;br /&gt;&lt;br /&gt;Cheers,&lt;br /&gt;Christoph&lt;br /&gt;&lt;br /&gt;Comments: This is not a bug.</description><author>leodemoura</author><pubDate>Fri, 07 Jun 2013 01:41:48 GMT</pubDate><guid isPermaLink="false">Closed Issue: get-value side effect [31] 20130607014148A</guid></item><item><title>Commented Issue: get-value side effect [31]</title><link>http://z3.codeplex.com/workitem/31</link><description>Hi Leo,&lt;br /&gt;&lt;br /&gt;Just wanted to let you know that &amp;#40;get-value &amp;#8230;&amp;#41; has a side effect, because it permanently enables model completion. So,&lt;br /&gt;&lt;br /&gt;&amp;#40;get-value &amp;#40;x&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;get-model&amp;#41;&lt;br /&gt;&lt;br /&gt;Will report a model that is different from&lt;br /&gt;&lt;br /&gt;&amp;#59; &amp;#40;get-value &amp;#40;x&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;get-model&amp;#41;&lt;br /&gt;&lt;br /&gt;Because model&amp;#58;&amp;#58;eval at model.cpp&amp;#58;131 permanently sets model completion to true. &lt;br /&gt;&lt;br /&gt;This is not really a problem, but could potentially confuse users a bit. So, doesn&amp;#8217;t really need a fix, I just wanted to point this out to you in case you&amp;#8217;d like to change the behavior. I guess we could work around it by creating a temporary copy of the model before it is completed&amp;#8230;&lt;br /&gt;&lt;br /&gt;Cheers,&lt;br /&gt;Christoph&lt;br /&gt;&lt;br /&gt;Comments: This is not a bug. This is the intended behavior. &amp;#10;Here is an example&amp;#58;&amp;#10;&amp;#10;&amp;#40;declare-const x Int&amp;#41;&amp;#10;&amp;#40;declare-const y Int&amp;#41;&amp;#10;&amp;#40;declare-const z Int&amp;#41;&amp;#10;&amp;#40;assert &amp;#40;&amp;#62; x 0&amp;#41;&amp;#41;&amp;#10;&amp;#40;check-sat&amp;#41;&amp;#10;&amp;#40;get-model&amp;#41;&amp;#10;&amp;#40;eval y&amp;#41;&amp;#10;&amp;#40;eval z&amp;#41;&amp;#10;&amp;#40;get-value &amp;#40;y&amp;#41;&amp;#41;&amp;#10;&amp;#40;eval z&amp;#41;&amp;#10;&amp;#40;get-model&amp;#41;&amp;#10;&amp;#10;</description><author>leodemoura</author><pubDate>Fri, 07 Jun 2013 01:41:41 GMT</pubDate><guid isPermaLink="false">Commented Issue: get-value side effect [31] 20130607014141A</guid></item><item><title>Commented Issue: get-value side effect [31]</title><link>http://z3.codeplex.com/workitem/31</link><description>Hi Leo,&lt;br /&gt;&lt;br /&gt;Just wanted to let you know that &amp;#40;get-value &amp;#8230;&amp;#41; has a side effect, because it permanently enables model completion. So,&lt;br /&gt;&lt;br /&gt;&amp;#40;get-value &amp;#40;x&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;get-model&amp;#41;&lt;br /&gt;&lt;br /&gt;Will report a model that is different from&lt;br /&gt;&lt;br /&gt;&amp;#59; &amp;#40;get-value &amp;#40;x&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;get-model&amp;#41;&lt;br /&gt;&lt;br /&gt;Because model&amp;#58;&amp;#58;eval at model.cpp&amp;#58;131 permanently sets model completion to true. &lt;br /&gt;&lt;br /&gt;This is not really a problem, but could potentially confuse users a bit. So, doesn&amp;#8217;t really need a fix, I just wanted to point this out to you in case you&amp;#8217;d like to change the behavior. I guess we could work around it by creating a temporary copy of the model before it is completed&amp;#8230;&lt;br /&gt;&lt;br /&gt;Cheers,&lt;br /&gt;Christoph&lt;br /&gt;&lt;br /&gt;Comments: Creating a temporary model is not an option since some users make thousands of calls to get-value, and the model can be quite big. &amp;#10;It is also not correct to erase the value assigned to x by model completion. If we do that, we can get a different value when we invoke &amp;#34;&amp;#40;get-value &amp;#40;x&amp;#41;&amp;#41;&amp;#34; again.</description><author>leodemoura</author><pubDate>Fri, 07 Jun 2013 01:36:41 GMT</pubDate><guid isPermaLink="false">Commented Issue: get-value side effect [31] 20130607013641A</guid></item><item><title>Closed Unassigned: ctx-simplify refcounting issue [37]</title><link>http://z3.codeplex.com/workitem/37</link><description>It seems like something is wrong with reference counting in ctx_simplify_tactic&amp;#58;&amp;#58;imp&amp;#58;&amp;#58;m_occs.  Right now, when I run the Python program here&amp;#58;&lt;br /&gt;&lt;br /&gt;  http&amp;#58;&amp;#47;&amp;#47;es.csail.mit.edu&amp;#47;z3-refcount-bug.py&lt;br /&gt;&lt;br /&gt;I get the following output&amp;#58;&lt;br /&gt;&lt;br /&gt;  Or&amp;#40;a, And&amp;#40;Not&amp;#40;b&amp;#41;, Not&amp;#40;And&amp;#40;Not&amp;#40;b&amp;#41;, c&amp;#41;&amp;#41;&amp;#41;&amp;#41; -&amp;#62; &amp;#91;&amp;#91;Or&amp;#40;a, And&amp;#40;Not&amp;#40;b&amp;#41;, Not&amp;#40;And&amp;#40;Not&amp;#40;b&amp;#41;, c&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#93;&amp;#93;&lt;br /&gt;&lt;br /&gt;meaning, the Not&amp;#40;b&amp;#41; inside the Not&amp;#40;And&amp;#40;...&amp;#41;&amp;#41; is not getting simplified away.  In principle, ctx-simplify-tactic should be getting this right, but it turns out this isn&amp;#39;t getting simplified because ctx_simplify_tactic&amp;#58;&amp;#58;imp&amp;#58;&amp;#58;shared&amp;#40;&amp;#41; returns false for the &amp;#39;b&amp;#39; expression.  This is despite the fact that &amp;#39;b&amp;#39; is, infact, shared.  After I apply this patch, which ignores m_occs in shared&amp;#40;&amp;#41;&amp;#58;&lt;br /&gt;&lt;br /&gt;  http&amp;#58;&amp;#47;&amp;#47;es.csail.mit.edu&amp;#47;0002-fix-ctx-simplify-to-properly-deal-with-this-case.patch&lt;br /&gt;&lt;br /&gt;the simplification finally works, where the same program produces&amp;#58;&lt;br /&gt;&lt;br /&gt;  Or&amp;#40;a, And&amp;#40;Not&amp;#40;b&amp;#41;, Not&amp;#40;And&amp;#40;Not&amp;#40;b&amp;#41;, c&amp;#41;&amp;#41;&amp;#41;&amp;#41; -&amp;#62; &amp;#91;&amp;#91;Or&amp;#40;a, And&amp;#40;Not&amp;#40;b&amp;#41;, Not&amp;#40;c&amp;#41;&amp;#41;&amp;#41;&amp;#93;&amp;#93;&lt;br /&gt;&lt;br /&gt;Comments: Fixed in the unstable branch.</description><author>leodemoura</author><pubDate>Fri, 07 Jun 2013 01:32:33 GMT</pubDate><guid isPermaLink="false">Closed Unassigned: ctx-simplify refcounting issue [37] 20130607013233A</guid></item><item><title>Commented Unassigned: ctx-simplify refcounting issue [37]</title><link>http://z3.codeplex.com/workitem/37</link><description>It seems like something is wrong with reference counting in ctx_simplify_tactic&amp;#58;&amp;#58;imp&amp;#58;&amp;#58;m_occs.  Right now, when I run the Python program here&amp;#58;&lt;br /&gt;&lt;br /&gt;  http&amp;#58;&amp;#47;&amp;#47;es.csail.mit.edu&amp;#47;z3-refcount-bug.py&lt;br /&gt;&lt;br /&gt;I get the following output&amp;#58;&lt;br /&gt;&lt;br /&gt;  Or&amp;#40;a, And&amp;#40;Not&amp;#40;b&amp;#41;, Not&amp;#40;And&amp;#40;Not&amp;#40;b&amp;#41;, c&amp;#41;&amp;#41;&amp;#41;&amp;#41; -&amp;#62; &amp;#91;&amp;#91;Or&amp;#40;a, And&amp;#40;Not&amp;#40;b&amp;#41;, Not&amp;#40;And&amp;#40;Not&amp;#40;b&amp;#41;, c&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#93;&amp;#93;&lt;br /&gt;&lt;br /&gt;meaning, the Not&amp;#40;b&amp;#41; inside the Not&amp;#40;And&amp;#40;...&amp;#41;&amp;#41; is not getting simplified away.  In principle, ctx-simplify-tactic should be getting this right, but it turns out this isn&amp;#39;t getting simplified because ctx_simplify_tactic&amp;#58;&amp;#58;imp&amp;#58;&amp;#58;shared&amp;#40;&amp;#41; returns false for the &amp;#39;b&amp;#39; expression.  This is despite the fact that &amp;#39;b&amp;#39; is, infact, shared.  After I apply this patch, which ignores m_occs in shared&amp;#40;&amp;#41;&amp;#58;&lt;br /&gt;&lt;br /&gt;  http&amp;#58;&amp;#47;&amp;#47;es.csail.mit.edu&amp;#47;0002-fix-ctx-simplify-to-properly-deal-with-this-case.patch&lt;br /&gt;&lt;br /&gt;the simplification finally works, where the same program produces&amp;#58;&lt;br /&gt;&lt;br /&gt;  Or&amp;#40;a, And&amp;#40;Not&amp;#40;b&amp;#41;, Not&amp;#40;And&amp;#40;Not&amp;#40;b&amp;#41;, c&amp;#41;&amp;#41;&amp;#41;&amp;#41; -&amp;#62; &amp;#91;&amp;#91;Or&amp;#40;a, And&amp;#40;Not&amp;#40;b&amp;#41;, Not&amp;#40;c&amp;#41;&amp;#41;&amp;#41;&amp;#93;&amp;#93;&lt;br /&gt;&lt;br /&gt;Comments: The bug was fixed in the unstable branch.&amp;#10;https&amp;#58;&amp;#47;&amp;#47;z3.codeplex.com&amp;#47;SourceControl&amp;#47;changeset&amp;#47;2b59f2ecc2b0cb7621c8558cd635a2b930b71097&amp;#10;&amp;#10;The reference counter was correct. There is only one occurrence of b &amp;#40;as a child of Not&amp;#41;, but there are many occurrences of Not&amp;#40;b&amp;#41;. The code for handling the Not was ignoring this fact.&amp;#10;&amp;#10;</description><author>leodemoura</author><pubDate>Fri, 07 Jun 2013 01:32:22 GMT</pubDate><guid isPermaLink="false">Commented Unassigned: ctx-simplify refcounting issue [37] 20130607013222A</guid></item><item><title>Closed Issue: OCaml API does not compile (obsolete functions and incorrect library ordering) [29]</title><link>http://z3.codeplex.com/workitem/29</link><description>Compiling the OCaml API yields errors.&lt;br /&gt;&lt;br /&gt;1&amp;#41; Some are due to obsolete functions still being referenced from the API&amp;#58;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;.&amp;#47;libz3stubs.a&amp;#40;z3_stubs.o&amp;#41;&amp;#58; In function &amp;#96;camlidl_z3_Z3_parse_z3_string&amp;#39;&amp;#58;&lt;br /&gt;z3_stubs.c&amp;#58;&amp;#40;.text&amp;#43;0xe6d7&amp;#41;&amp;#58; undefined reference to &amp;#96;Z3_parse_z3_string&amp;#39;&lt;br /&gt;.&amp;#47;libz3stubs.a&amp;#40;z3_stubs.o&amp;#41;&amp;#58; In function &amp;#96;camlidl_z3_Z3_parse_z3_file&amp;#39;&amp;#58;&lt;br /&gt;z3_stubs.c&amp;#58;&amp;#40;.text&amp;#43;0xe757&amp;#41;&amp;#58; undefined reference to &amp;#96;Z3_parse_z3_file&amp;#39;&lt;br /&gt;.&amp;#47;libz3stubs.a&amp;#40;z3_stubs.o&amp;#41;&amp;#58; In function &amp;#96;camlidl_z3_Z3_parse_z3V3_string&amp;#39;&amp;#58;&lt;br /&gt;z3_stubs.c&amp;#58;&amp;#40;.text&amp;#43;0x1cdd1&amp;#41;&amp;#58; undefined reference to &amp;#96;Z3_parse_z3_string&amp;#39;&lt;br /&gt;.&amp;#47;libz3stubs.a&amp;#40;z3_stubs.o&amp;#41;&amp;#58; In function &amp;#96;camlidl_z3_Z3_parse_z3V3_file&amp;#39;&amp;#58;&lt;br /&gt;z3_stubs.c&amp;#58;&amp;#40;.text&amp;#43;0x1ce51&amp;#41;&amp;#58; undefined reference to &amp;#96;Z3_parse_z3_file&amp;#39;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;&lt;br /&gt;Solution&amp;#58; remove them from the API.&lt;br /&gt;&lt;br /&gt;2&amp;#41; The ordering of the libraries in -cclib -l seems reversed&amp;#58; with usual Unix linkers, if library a refers to library b, they should be linked -la -lb&lt;br /&gt;&lt;br /&gt;Solution&amp;#58; reverse the ordering, e.g. -cclib -lz3 -cclib -lcamlidl -cclib -lz3stubs&lt;br /&gt;&lt;br /&gt;Comments: The ML API will be replaced by a new one. The ml -ng branch contains the new ML API. It will be merged with the unstable branch when it is finished and stable.</description><author>leodemoura</author><pubDate>Thu, 06 Jun 2013 20:42:41 GMT</pubDate><guid isPermaLink="false">Closed Issue: OCaml API does not compile (obsolete functions and incorrect library ordering) [29] 20130606084241P</guid></item><item><title>Closed Issue: OCaml API - use ocamlfind [30]</title><link>http://z3.codeplex.com/workitem/30</link><description>Suggest inclusion of a shell script doing&amp;#58;&lt;br /&gt;&lt;br /&gt;ocamlfind install z3 META z3.cma z3.cmi z3.cmxa&lt;br /&gt;&lt;br /&gt;with META containing&amp;#58;&lt;br /&gt;description &amp;#61; &amp;#34;Z3 SMT-solver&amp;#34;&lt;br /&gt;version &amp;#61; &amp;#34;2013-03-30&amp;#34;&lt;br /&gt;archive&amp;#40;byte&amp;#41; &amp;#61; &amp;#34;z3.cma&amp;#34;&lt;br /&gt;archive&amp;#40;native&amp;#41; &amp;#61; &amp;#34;z3.cmxa&amp;#34;&lt;br /&gt;&lt;br /&gt;Comments: The functionality will be added to the new ML API.</description><author>leodemoura</author><pubDate>Thu, 06 Jun 2013 20:39:44 GMT</pubDate><guid isPermaLink="false">Closed Issue: OCaml API - use ocamlfind [30] 20130606083944P</guid></item><item><title>Closed Unassigned: JAVA API: mkBVAddNoOverflow issue [36]</title><link>http://z3.codeplex.com/workitem/36</link><description>There seems to be a problem with mkBVAddNoOverflow. Calling the method works, but doing any interaction with the solver results in, what seems like, an infinite loop or a crash.&lt;br /&gt;&lt;br /&gt;I can use MkBVMulNoOverflow just fine.&lt;br /&gt;&lt;br /&gt;error dump&amp;#58; http&amp;#58;&amp;#47;&amp;#47;pastebin.com&amp;#47;aXGCLkxM&lt;br /&gt;&lt;br /&gt;this is enough to make the program crash&amp;#58;&lt;br /&gt;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;solver.add&amp;#40;ctx.mkBVAddNoOverflow&amp;#40;ctx.mkBVConst&amp;#40;&amp;#34;t1&amp;#34;, 8&amp;#41;, ctx.mkBVConst&amp;#40;&amp;#34;t2&amp;#34;, 8&amp;#41;, false&amp;#41;&amp;#41;&amp;#59;&lt;br /&gt;System.out.println&amp;#40;solver.toString&amp;#40;&amp;#41;&amp;#41;&amp;#59;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;&lt;br /&gt;I was using a not so old commit from the unstable branch but the problem persists with the latest commit &amp;#91;0673f645c9ee&amp;#93;&amp;#40;https&amp;#58;&amp;#47;&amp;#47;z3.codeplex.com&amp;#47;SourceControl&amp;#47;changeset&amp;#47;0673f645c9eeb65eef6a9803b2801069b76105c6&amp;#41;&lt;br /&gt;Comments: Fixed in the unstable &amp;#40;work-in-progress&amp;#41; branch</description><author>leodemoura</author><pubDate>Thu, 06 Jun 2013 20:37:36 GMT</pubDate><guid isPermaLink="false">Closed Unassigned: JAVA API: mkBVAddNoOverflow issue [36] 20130606083736P</guid></item><item><title>Closed Issue: Solver push/pop causes check to fail [26]</title><link>http://z3.codeplex.com/workitem/26</link><description>I found a situation where simply performing a solver.push&amp;#40;&amp;#41;&amp;#59; solver.pop&amp;#40;&amp;#41; pair &amp;#40;even with nothing between&amp;#41; causes a later call to solver.check to return unknown rather than sat.  I was able to reduce the test case as far as&amp;#58;&lt;br /&gt;  http&amp;#58;&amp;#47;&amp;#47;rise4fun.com&amp;#47;Z3Py&amp;#47;iAkW&lt;br /&gt;Currently, this test returns unknown with the reason &amp;#34;&amp;#40;incomplete quantifiers&amp;#41;&amp;#34;.  However, without the &amp;#34;s.push&amp;#40;&amp;#41;&amp;#59; s.pop&amp;#40;&amp;#41;&amp;#34; on line 28, the call to s.check&amp;#40;&amp;#41; returns sat &amp;#40;my actual code of course does more work between the push and pop, but it wasn&amp;#39;t necessary for the test case&amp;#41;.  This happens on both the master and unstable branches.&lt;br /&gt;Comments: This is not a bug, but a limitation of the current version. We can continue the discussion in the &amp;#34;Discussions Tab&amp;#34;</description><author>leodemoura</author><pubDate>Thu, 06 Jun 2013 20:24:53 GMT</pubDate><guid isPermaLink="false">Closed Issue: Solver push/pop causes check to fail [26] 20130606082453P</guid></item><item><title>Closed Unassigned: Feature request: codatatypes (datatypes without occurs check) [34]</title><link>http://z3.codeplex.com/workitem/34</link><description>Hi,&lt;br /&gt;&lt;br /&gt;We are using Z3 to prove properties of Haskell programs in our tool &amp;#91;HipSpec&amp;#93;&amp;#40;https&amp;#58;&amp;#47;&amp;#47;github.com&amp;#47;danr&amp;#47;hipspec&amp;#41;. We would obviously like to use Z3 datatypes to model Haskell datatypes. The trouble is that Z3&amp;#39;s datatypes are algebraic while Haskell&amp;#39;s are coalgebraic. That is, in Haskell you can have an infinite value like n &amp;#61; Succ n, while with Z3 datatypes you cannot.&lt;br /&gt;&lt;br /&gt;As far as I can tell, the only thing stopping us from using Z3 datatypes is the &amp;#34;occurs check&amp;#34;, which rules out cyclic terms like n &amp;#61; Succ n. Without the occurs check, I think Z3 datatypes would be agnostic about whether they are data or codata. So I would like a way to switch off the occurs check for a particular datatype, or else somehow declare it as codata &amp;#40;which would have the same effect&amp;#41;.&lt;br /&gt;&lt;br /&gt;Nick&lt;br /&gt;Comments: Thanks for requesting the feature, but we don&amp;#39;t have plans to support it in the near future. We can continue the discussion in the &amp;#34;Discussions Tab&amp;#34;</description><author>leodemoura</author><pubDate>Thu, 06 Jun 2013 20:23:36 GMT</pubDate><guid isPermaLink="false">Closed Unassigned: Feature request: codatatypes (datatypes without occurs check) [34] 20130606082336P</guid></item><item><title>Closed Unassigned: Z3DEBUG &amp;&amp; _EXTERNAL_RELEASE -&gt; erase_not_removed assertion failure [38]</title><link>http://z3.codeplex.com/workitem/38</link><description>Go ahead and close this bug if you don&amp;#39;t consider Z3DEBUG &amp;#38;&amp;#38; _EXTERNAL_RELEASE to be a sensible combination of build flags.  We wanted to turn on assertions in z3 without turning on the various experimental things enabled by &amp;#33;_EXTERNAL_RELEASE.  This could be nothing or it could represent a lurking bug that happens only in release builds, and hasn&amp;#39;t been discovered since the debug builds are always &amp;#33;_EXTERNAL_RELEASE.&lt;br /&gt;&lt;br /&gt;Stack&amp;#58;&lt;br /&gt;&amp;#35;8  0x0000000000b23c06 in sat&amp;#58;&amp;#58;clause_use_list&amp;#58;&amp;#58;erase_not_removed &amp;#40;this&amp;#61;0x7ffff7fc6840, c&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_clause_use_list.h&amp;#58;62&lt;br /&gt;&amp;#35;9  0x0000000000b20bd5 in sat&amp;#58;&amp;#58;simplifier&amp;#58;&amp;#58;cleanup_clause &amp;#40;this&amp;#61;0x7fffffffc778, c&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_simplifier.cpp&amp;#58;531&lt;br /&gt;&amp;#35;10 0x0000000000b1fb75 in sat&amp;#58;&amp;#58;simplifier&amp;#58;&amp;#58;cleanup_clauses &amp;#40;this&amp;#61;0x7fffffffc778, cs&amp;#61;..., learned&amp;#61;true, vars_eliminated&amp;#61;true&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_simplifier.cpp&amp;#58;247&lt;br /&gt;&amp;#35;11 0x0000000000b1f8d6 in sat&amp;#58;&amp;#58;simplifier&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x7fffffffc778, learned&amp;#61;false&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_simplifier.cpp&amp;#58;189&lt;br /&gt;&amp;#35;12 0x0000000000b0b818 in sat&amp;#58;&amp;#58;solver&amp;#58;&amp;#58;simplify_problem &amp;#40;this&amp;#61;0x7fffffffc3d8&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_solver.cpp&amp;#58;865&lt;br /&gt;&amp;#35;13 0x0000000000b0aed5 in sat&amp;#58;&amp;#58;solver&amp;#58;&amp;#58;check &amp;#40;this&amp;#61;0x7fffffffc3d8&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_solver.cpp&amp;#58;698&lt;br /&gt;&amp;#35;14 0x0000000000a184d7 in sat_tactic&amp;#58;&amp;#58;imp&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x7fffffffc3c0, g&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;tactic&amp;#47;sat_tactic.cpp&amp;#58;70&lt;br /&gt;&amp;#35;15 0x0000000000a18cc3 in sat_tactic&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13c98e8, g&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;tactic&amp;#47;sat_tactic.cpp&amp;#58;174&lt;br /&gt;&amp;#35;16 0x0000000000bdc51c in cleanup_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13c9938, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;1206&lt;br /&gt;&amp;#35;17 0x0000000000bdcb97 in cond_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13cb0d8, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;1303&lt;br /&gt;&amp;#35;18 0x0000000000bd65ea in and_then_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13ceab8, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;176&lt;br /&gt;&amp;#35;19 0x0000000000bd65ea in and_then_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13ceaf8, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;176&lt;br /&gt;&amp;#35;20 0x0000000000bdcb97 in cond_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13d0308, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;1303&lt;br /&gt;&amp;#35;21 0x0000000000bdcb5b in cond_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13d0388, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;1301&lt;br /&gt;&amp;#35;22 0x0000000000bd65ea in and_then_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13d03d8, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;176&lt;br /&gt;&amp;#35;23 0x0000000000bdac50 in unary_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13d0418, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;989&lt;br /&gt;&amp;#35;24 0x0000000000be90bc in exec &amp;#40;t&amp;#61;..., in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactic.cpp&amp;#58;180&lt;br /&gt;&amp;#35;25 0x0000000000be9330 in check_sat &amp;#40;t&amp;#61;..., g&amp;#61;..., md&amp;#61;..., pr&amp;#61;..., core&amp;#61;..., reason_unknown&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactic.cpp&amp;#58;202&lt;br /&gt;&amp;#35;26 0x0000000000a60168 in strategic_solver&amp;#58;&amp;#58;check_sat &amp;#40;this&amp;#61;0x1396be8, num_assumptions&amp;#61;0, assumptions&amp;#61;0x13b2040&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;solver&amp;#47;strategic_solver.cpp&amp;#58;447&lt;br /&gt;&amp;#35;27 0x0000000000a3aa83 in cmd_context&amp;#58;&amp;#58;check_sat &amp;#40;this&amp;#61;0x7fffffffe370, num_assumptions&amp;#61;0, assumptions&amp;#61;0x13b2040&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;cmd_context&amp;#47;cmd_context.cpp&amp;#58;1294&lt;br /&gt;&amp;#35;28 0x00000000009cf487 in smt2&amp;#58;&amp;#58;parser&amp;#58;&amp;#58;parse_check_sat &amp;#40;this&amp;#61;0x7fffffffdb70&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;parsers&amp;#47;smt2&amp;#47;smt2parser.cpp&amp;#58;2005&lt;br /&gt;&amp;#35;29 0x00000000009d123e in smt2&amp;#58;&amp;#58;parser&amp;#58;&amp;#58;parse_cmd &amp;#40;this&amp;#61;0x7fffffffdb70&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;parsers&amp;#47;smt2&amp;#47;smt2parser.cpp&amp;#58;2314&lt;br /&gt;&amp;#35;30 0x00000000009d2048 in smt2&amp;#58;&amp;#58;parser&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x7fffffffdb70&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;parsers&amp;#47;smt2&amp;#47;smt2parser.cpp&amp;#58;2443&lt;br /&gt;&amp;#35;31 0x00000000009c3f18 in parse_smt2_commands &amp;#40;ctx&amp;#61;..., is&amp;#61;..., interactive&amp;#61;false&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;parsers&amp;#47;smt2&amp;#47;smt2parser.cpp&amp;#58;2492&lt;br /&gt;&amp;#35;32 0x0000000000409993 in read_smtlib2_commands &amp;#40;file_name&amp;#61;0x7fffffffec03 &amp;#34;&amp;#47;tmp&amp;#47;foo.smt2&amp;#34;, front_end_params&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;shell&amp;#47;smtlib_frontend.cpp&amp;#58;128&lt;br /&gt;&amp;#35;33 0x0000000000404bb1 in main &amp;#40;argc&amp;#61;2, argv&amp;#61;0x7fffffffe938&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;shell&amp;#47;main.cpp&amp;#58;429&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I am attaching a test case in smt2 format.&lt;br /&gt;Comments: Fixed in the unstable branch</description><author>leodemoura</author><pubDate>Thu, 06 Jun 2013 20:22:00 GMT</pubDate><guid isPermaLink="false">Closed Unassigned: Z3DEBUG &amp;&amp; _EXTERNAL_RELEASE -&gt; erase_not_removed assertion failure [38] 20130606082200P</guid></item><item><title>Commented Unassigned: Z3DEBUG &amp;&amp; _EXTERNAL_RELEASE -&gt; erase_not_removed assertion failure [38]</title><link>http://z3.codeplex.com/workitem/38</link><description>Go ahead and close this bug if you don&amp;#39;t consider Z3DEBUG &amp;#38;&amp;#38; _EXTERNAL_RELEASE to be a sensible combination of build flags.  We wanted to turn on assertions in z3 without turning on the various experimental things enabled by &amp;#33;_EXTERNAL_RELEASE.  This could be nothing or it could represent a lurking bug that happens only in release builds, and hasn&amp;#39;t been discovered since the debug builds are always &amp;#33;_EXTERNAL_RELEASE.&lt;br /&gt;&lt;br /&gt;Stack&amp;#58;&lt;br /&gt;&amp;#35;8  0x0000000000b23c06 in sat&amp;#58;&amp;#58;clause_use_list&amp;#58;&amp;#58;erase_not_removed &amp;#40;this&amp;#61;0x7ffff7fc6840, c&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_clause_use_list.h&amp;#58;62&lt;br /&gt;&amp;#35;9  0x0000000000b20bd5 in sat&amp;#58;&amp;#58;simplifier&amp;#58;&amp;#58;cleanup_clause &amp;#40;this&amp;#61;0x7fffffffc778, c&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_simplifier.cpp&amp;#58;531&lt;br /&gt;&amp;#35;10 0x0000000000b1fb75 in sat&amp;#58;&amp;#58;simplifier&amp;#58;&amp;#58;cleanup_clauses &amp;#40;this&amp;#61;0x7fffffffc778, cs&amp;#61;..., learned&amp;#61;true, vars_eliminated&amp;#61;true&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_simplifier.cpp&amp;#58;247&lt;br /&gt;&amp;#35;11 0x0000000000b1f8d6 in sat&amp;#58;&amp;#58;simplifier&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x7fffffffc778, learned&amp;#61;false&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_simplifier.cpp&amp;#58;189&lt;br /&gt;&amp;#35;12 0x0000000000b0b818 in sat&amp;#58;&amp;#58;solver&amp;#58;&amp;#58;simplify_problem &amp;#40;this&amp;#61;0x7fffffffc3d8&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_solver.cpp&amp;#58;865&lt;br /&gt;&amp;#35;13 0x0000000000b0aed5 in sat&amp;#58;&amp;#58;solver&amp;#58;&amp;#58;check &amp;#40;this&amp;#61;0x7fffffffc3d8&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;sat_solver.cpp&amp;#58;698&lt;br /&gt;&amp;#35;14 0x0000000000a184d7 in sat_tactic&amp;#58;&amp;#58;imp&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x7fffffffc3c0, g&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;tactic&amp;#47;sat_tactic.cpp&amp;#58;70&lt;br /&gt;&amp;#35;15 0x0000000000a18cc3 in sat_tactic&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13c98e8, g&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;sat&amp;#47;tactic&amp;#47;sat_tactic.cpp&amp;#58;174&lt;br /&gt;&amp;#35;16 0x0000000000bdc51c in cleanup_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13c9938, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;1206&lt;br /&gt;&amp;#35;17 0x0000000000bdcb97 in cond_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13cb0d8, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;1303&lt;br /&gt;&amp;#35;18 0x0000000000bd65ea in and_then_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13ceab8, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;176&lt;br /&gt;&amp;#35;19 0x0000000000bd65ea in and_then_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13ceaf8, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;176&lt;br /&gt;&amp;#35;20 0x0000000000bdcb97 in cond_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13d0308, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;1303&lt;br /&gt;&amp;#35;21 0x0000000000bdcb5b in cond_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13d0388, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;1301&lt;br /&gt;&amp;#35;22 0x0000000000bd65ea in and_then_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13d03d8, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;176&lt;br /&gt;&amp;#35;23 0x0000000000bdac50 in unary_tactical&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x13d0418, in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactical.cpp&amp;#58;989&lt;br /&gt;&amp;#35;24 0x0000000000be90bc in exec &amp;#40;t&amp;#61;..., in&amp;#61;..., result&amp;#61;..., mc&amp;#61;..., pc&amp;#61;..., core&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactic.cpp&amp;#58;180&lt;br /&gt;&amp;#35;25 0x0000000000be9330 in check_sat &amp;#40;t&amp;#61;..., g&amp;#61;..., md&amp;#61;..., pr&amp;#61;..., core&amp;#61;..., reason_unknown&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;tactic&amp;#47;tactic.cpp&amp;#58;202&lt;br /&gt;&amp;#35;26 0x0000000000a60168 in strategic_solver&amp;#58;&amp;#58;check_sat &amp;#40;this&amp;#61;0x1396be8, num_assumptions&amp;#61;0, assumptions&amp;#61;0x13b2040&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;solver&amp;#47;strategic_solver.cpp&amp;#58;447&lt;br /&gt;&amp;#35;27 0x0000000000a3aa83 in cmd_context&amp;#58;&amp;#58;check_sat &amp;#40;this&amp;#61;0x7fffffffe370, num_assumptions&amp;#61;0, assumptions&amp;#61;0x13b2040&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;cmd_context&amp;#47;cmd_context.cpp&amp;#58;1294&lt;br /&gt;&amp;#35;28 0x00000000009cf487 in smt2&amp;#58;&amp;#58;parser&amp;#58;&amp;#58;parse_check_sat &amp;#40;this&amp;#61;0x7fffffffdb70&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;parsers&amp;#47;smt2&amp;#47;smt2parser.cpp&amp;#58;2005&lt;br /&gt;&amp;#35;29 0x00000000009d123e in smt2&amp;#58;&amp;#58;parser&amp;#58;&amp;#58;parse_cmd &amp;#40;this&amp;#61;0x7fffffffdb70&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;parsers&amp;#47;smt2&amp;#47;smt2parser.cpp&amp;#58;2314&lt;br /&gt;&amp;#35;30 0x00000000009d2048 in smt2&amp;#58;&amp;#58;parser&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x7fffffffdb70&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;parsers&amp;#47;smt2&amp;#47;smt2parser.cpp&amp;#58;2443&lt;br /&gt;&amp;#35;31 0x00000000009c3f18 in parse_smt2_commands &amp;#40;ctx&amp;#61;..., is&amp;#61;..., interactive&amp;#61;false&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;parsers&amp;#47;smt2&amp;#47;smt2parser.cpp&amp;#58;2492&lt;br /&gt;&amp;#35;32 0x0000000000409993 in read_smtlib2_commands &amp;#40;file_name&amp;#61;0x7fffffffec03 &amp;#34;&amp;#47;tmp&amp;#47;foo.smt2&amp;#34;, front_end_params&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;shell&amp;#47;smtlib_frontend.cpp&amp;#58;128&lt;br /&gt;&amp;#35;33 0x0000000000404bb1 in main &amp;#40;argc&amp;#61;2, argv&amp;#61;0x7fffffffe938&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;shell&amp;#47;main.cpp&amp;#58;429&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I am attaching a test case in smt2 format.&lt;br /&gt;Comments: Thanks for reporting the assertion violation.&amp;#10;I fixed it in the unstable branch&amp;#58;&amp;#10;&amp;#10;https&amp;#58;&amp;#47;&amp;#47;z3.codeplex.com&amp;#47;SourceControl&amp;#47;changeset&amp;#47;f4f1c63abb4a6fd0df908e376b0ab014bce3d9da&amp;#10;</description><author>leodemoura</author><pubDate>Thu, 06 Jun 2013 20:21:49 GMT</pubDate><guid isPermaLink="false">Commented Unassigned: Z3DEBUG &amp;&amp; _EXTERNAL_RELEASE -&gt; erase_not_removed assertion failure [38] 20130606082149P</guid></item><item><title>Commented Unassigned: assertion failure: i == 0 || !is_numeral(args[i]) in poly_simplifier_plugin::mk_mul [45]</title><link>http://z3.codeplex.com/workitem/45</link><description>I have another assertion failure on the end of the master branch.  I don&amp;#39;t have a fix for the problem yet.  It looks like mk_mul isn&amp;#39;t expecting numerals in parameter 2 &amp;#40;constant coefficients are expected to come first&amp;#63;&amp;#41;.  However, it seems one of the &amp;#34;monomials&amp;#34; is &amp;#40;bvmul bv3&amp;#91;2&amp;#93; bv0&amp;#91;2&amp;#93;&amp;#41;, which isn&amp;#39;t really an expected form.&lt;br /&gt;&lt;br /&gt;The line number here might be a little off &amp;#40;I&amp;#39;ve added some tracing statements&amp;#41;&amp;#58;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;ASSERTION VIOLATION&lt;br /&gt;File&amp;#58; third-party&amp;#47;z3&amp;#47;src&amp;#47;ast&amp;#47;simplifier&amp;#47;poly_simplifier_plugin.cpp&lt;br /&gt;Line&amp;#58; 57&lt;br /&gt;i &amp;#61;&amp;#61; 0 &amp;#124;&amp;#124; &amp;#33;is_numeral&amp;#40;args&amp;#91;i&amp;#93;&amp;#41;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;&lt;br /&gt;Relevant code&amp;#58;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;expr &amp;#42; poly_simplifier_plugin&amp;#58;&amp;#58;mk_mul&amp;#40;unsigned num_args, expr &amp;#42; const &amp;#42; args&amp;#41; &amp;#123;&lt;br /&gt;    SASSERT&amp;#40;num_args &amp;#62; 0&amp;#41;&amp;#59;&lt;br /&gt;&amp;#35;ifdef Z3DEBUG&lt;br /&gt;    &amp;#47;&amp;#47; check for incorrect use of mk_mul&lt;br /&gt;    set_curr_sort&amp;#40;args&amp;#91;0&amp;#93;&amp;#41;&amp;#59;&lt;br /&gt;    SASSERT&amp;#40;&amp;#33;is_zero&amp;#40;args&amp;#91;0&amp;#93;&amp;#41;&amp;#41;&amp;#59;&lt;br /&gt;    numeral k&amp;#59;&lt;br /&gt;    for &amp;#40;unsigned i &amp;#61; 0&amp;#59; i &amp;#60; num_args&amp;#59; i&amp;#43;&amp;#43;&amp;#41; &amp;#123;&lt;br /&gt;        SASSERT&amp;#40;&amp;#33;is_numeral&amp;#40;args&amp;#91;i&amp;#93;, k&amp;#41; &amp;#124;&amp;#124; &amp;#33;k.is_one&amp;#40;&amp;#41;&amp;#41;&amp;#59;&lt;br /&gt;        SASSERT&amp;#40;i &amp;#61;&amp;#61; 0 &amp;#124;&amp;#124; &amp;#33;is_numeral&amp;#40;args&amp;#91;i&amp;#93;&amp;#41;&amp;#41;&amp;#59; &amp;#47;&amp;#47; &amp;#60;--- crash&lt;br /&gt;    &amp;#125;&lt;br /&gt;&amp;#35;endif&lt;br /&gt;...&lt;br /&gt;...&lt;br /&gt;...&lt;br /&gt;        for &amp;#40;unsigned i &amp;#61; 0&amp;#59; i &amp;#60; sz&amp;#59; i&amp;#43;&amp;#43;&amp;#41; &amp;#123;&lt;br /&gt;            expr &amp;#42; m    &amp;#61; monomials.get&amp;#40;i&amp;#41;&amp;#59; &amp;#47;&amp;#47; returns &amp;#40;bvmul bv3&amp;#91;2&amp;#93; bv0&amp;#91;2&amp;#93;&amp;#41;&lt;br /&gt;            expr &amp;#42; body &amp;#61; 0&amp;#59;&lt;br /&gt;            if &amp;#40;&amp;#33;is_numeral&amp;#40;m, coeff&amp;#41;&amp;#41; &amp;#123;&lt;br /&gt;                body &amp;#61; get_monomial_body&amp;#40;m&amp;#41;&amp;#59; &amp;#47;&amp;#47; &amp;#60;--- returns bv0&amp;#91;2&amp;#93;&lt;br /&gt;                get_monomial_coeff&amp;#40;m, coeff&amp;#41;&amp;#59;&lt;br /&gt;            &amp;#125;&lt;br /&gt;            if &amp;#40;last_body &amp;#61;&amp;#61; body&amp;#41; &amp;#123;&lt;br /&gt;                last_coeff &amp;#43;&amp;#61; coeff&amp;#59;&lt;br /&gt;                continue&amp;#59;&lt;br /&gt;            &amp;#125;&lt;br /&gt;            expr &amp;#42; new_m &amp;#61; mk_mul&amp;#40;last_coeff, last_body&amp;#41;&amp;#59; &amp;#47;&amp;#47; &amp;#60;--- doesn&amp;#39;t want a numeral for param 2&lt;br /&gt;            if &amp;#40;new_m &amp;#38;&amp;#38; &amp;#33;is_zero&amp;#40;new_m&amp;#41;&amp;#41;&lt;br /&gt;                new_monomials.push_back&amp;#40;new_m&amp;#41;&amp;#59;&lt;br /&gt;            last_body  &amp;#61; body&amp;#59;&lt;br /&gt;            last_coeff &amp;#61; coeff&amp;#59;&lt;br /&gt;       &amp;#125;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;&lt;br /&gt;Call stack&amp;#58;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;&amp;#35;0  0x00007ffff7334445 in __GI_raise &amp;#40;sig&amp;#61;&amp;#60;optimized out&amp;#62;&amp;#41; at ..&amp;#47;nptl&amp;#47;sysdeps&amp;#47;unix&amp;#47;sysv&amp;#47;linux&amp;#47;raise.c&amp;#58;64&lt;br /&gt;&amp;#35;1  0x00007ffff7337bab in __GI_abort &amp;#40;&amp;#41; at abort.c&amp;#58;91&lt;br /&gt;&amp;#35;2  0x0000000000bf08f6 in poly_simplifier_plugin&amp;#58;&amp;#58;mk_mul &amp;#40;this&amp;#61;0x1415b68, num_args&amp;#61;2, args&amp;#61;0x7fffffffce60&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;ast&amp;#47;simplifier&amp;#47;poly_simplifier_plugin.cpp&amp;#58;57&lt;br /&gt;&amp;#35;3  0x0000000000bf0bdd in poly_simplifier_plugin&amp;#58;&amp;#58;mk_mul &amp;#40;this&amp;#61;0x1415b68, c&amp;#61;..., body&amp;#61;0x144c958&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;ast&amp;#47;simplifier&amp;#47;poly_simplifier_plugin.cpp&amp;#58;85&lt;br /&gt;&amp;#35;4  0x0000000000bf221c in poly_simplifier_plugin&amp;#58;&amp;#58;mk_sum_of_monomials &amp;#40;this&amp;#61;0x1415b68, monomials&amp;#61;..., result&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;ast&amp;#47;simplifier&amp;#47;poly_simplifier_plugin.cpp&amp;#58;494&lt;br /&gt;&amp;#35;5  0x0000000000bdcdc6 in bv_simplifier_plugin&amp;#58;&amp;#58;mk_eq_core &amp;#40;this&amp;#61;0x1415b68, arg1&amp;#61;0x144c958, arg2&amp;#61;0x1453bd8, result&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;ast&amp;#47;simplifier&amp;#47;bv_simplifier_plugin.cpp&amp;#58;883&lt;br /&gt;&amp;#35;6  0x0000000000bdc3b5 in bv_simplifier_plugin&amp;#58;&amp;#58;mk_bv_eq &amp;#40;this&amp;#61;0x1415b68, a1&amp;#61;0x1451728, a2&amp;#61;0x14501f8, result&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;ast&amp;#47;simplifier&amp;#47;bv_simplifier_plugin.cpp&amp;#58;785&lt;br /&gt;&amp;#35;7  0x0000000000bd8b6a in bv_simplifier_plugin&amp;#58;&amp;#58;reduce_eq &amp;#40;this&amp;#61;0x1415b68, lhs&amp;#61;0x1451728, rhs&amp;#61;0x14501f8, result&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;ast&amp;#47;simplifier&amp;#47;bv_simplifier_plugin.cpp&amp;#58;203&lt;br /&gt;&amp;#35;8  0x0000000000bcc1f2 in simplifier&amp;#58;&amp;#58;mk_app &amp;#40;this&amp;#61;0x1412218, decl&amp;#61;0x14110a8, num_args&amp;#61;2, args&amp;#61;0x1450860, result&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;ast&amp;#47;simplifier&amp;#47;simplifier.cpp&amp;#58;451&lt;br /&gt;&amp;#35;9  0x0000000000bcb4c4 in simplifier&amp;#58;&amp;#58;reduce1_app_core &amp;#40;this&amp;#61;0x1412218, n&amp;#61;0x1450718&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;ast&amp;#47;simplifier&amp;#47;simplifier.cpp&amp;#58;303&lt;br /&gt;&amp;#35;10 0x0000000000bcb384 in simplifier&amp;#58;&amp;#58;reduce1_app &amp;#40;this&amp;#61;0x1412218, n&amp;#61;0x1450718&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;ast&amp;#47;simplifier&amp;#47;simplifier.cpp&amp;#58;275&lt;br /&gt;&amp;#35;11 0x0000000000bcb224 in simplifier&amp;#58;&amp;#58;reduce1 &amp;#40;this&amp;#61;0x1412218, n&amp;#61;0x1450718&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;ast&amp;#47;simplifier&amp;#47;simplifier.cpp&amp;#58;246&lt;br /&gt;&amp;#35;12 0x0000000000bcab30 in simplifier&amp;#58;&amp;#58;reduce_core &amp;#40;this&amp;#61;0x1412218, n&amp;#61;0x1450718&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;ast&amp;#47;simplifier&amp;#47;simplifier.cpp&amp;#58;138&lt;br /&gt;&amp;#35;13 0x0000000000bca6f5 in simplifier&amp;#58;&amp;#58;operator&amp;#40;&amp;#41; &amp;#40;this&amp;#61;0x1412218, s&amp;#61;0x1450718, r&amp;#61;..., p&amp;#61;...&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;ast&amp;#47;simplifier&amp;#47;simplifier.cpp&amp;#58;69&lt;br /&gt;&amp;#35;14 0x00000000007f3739 in asserted_formulas&amp;#58;&amp;#58;assert_expr &amp;#40;this&amp;#61;0x14120e0, e&amp;#61;0x1411c28, _in_pr&amp;#61;0x13fffd8&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;smt&amp;#47;asserted_formulas.cpp&amp;#58;184&lt;br /&gt;&amp;#35;15 0x00000000007f3926 in asserted_formulas&amp;#58;&amp;#58;assert_expr &amp;#40;this&amp;#61;0x14120e0, e&amp;#61;0x1411c28&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;smt&amp;#47;asserted_formulas.cpp&amp;#58;200&lt;br /&gt;&amp;#35;16 0x00000000007ad85b in smt&amp;#58;&amp;#58;context&amp;#58;&amp;#58;assert_expr_core &amp;#40;this&amp;#61;0x1412028, e&amp;#61;0x1411c28, pr&amp;#61;0x0&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;smt&amp;#47;smt_context.cpp&amp;#58;2778&lt;br /&gt;&amp;#35;17 0x00000000007ad8f8 in smt&amp;#58;&amp;#58;context&amp;#58;&amp;#58;assert_expr &amp;#40;this&amp;#61;0x1412028, e&amp;#61;0x1411c28, pr&amp;#61;0x0&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;smt&amp;#47;smt_context.cpp&amp;#58;2790&lt;br /&gt;&amp;#35;18 0x00000000007ad8a6 in smt&amp;#58;&amp;#58;context&amp;#58;&amp;#58;assert_expr &amp;#40;this&amp;#61;0x1412028, e&amp;#61;0x1411c28&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;smt&amp;#47;smt_context.cpp&amp;#58;2785&lt;br /&gt;&amp;#35;19 0x00000000007987b1 in smt&amp;#58;&amp;#58;kernel&amp;#58;&amp;#58;imp&amp;#58;&amp;#58;assert_expr &amp;#40;this&amp;#61;0x1412028, e&amp;#61;0x1411c28&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;smt&amp;#47;smt_kernel.cpp&amp;#58;57&lt;br /&gt;&amp;#35;20 0x0000000000797ed2 in smt&amp;#58;&amp;#58;kernel&amp;#58;&amp;#58;assert_expr &amp;#40;this&amp;#61;0x1412008, e&amp;#61;0x1411c28&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;smt&amp;#47;smt_kernel.cpp&amp;#58;207&lt;br /&gt;&amp;#35;21 0x00000000008010ba in smt&amp;#58;&amp;#58;solver&amp;#58;&amp;#58;assert_expr &amp;#40;this&amp;#61;0x13ea178, t&amp;#61;0x1411c28&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;smt&amp;#47;smt_solver.cpp&amp;#58;95&lt;br /&gt;&amp;#35;22 0x0000000000a9cebd in strategic_solver&amp;#58;&amp;#58;init_inc_solver &amp;#40;this&amp;#61;0x13eb0c8&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;solver&amp;#47;strategic_solver.cpp&amp;#58;205&lt;br /&gt;&amp;#35;23 0x0000000000a9d845 in strategic_solver&amp;#58;&amp;#58;check_sat_with_assumptions &amp;#40;this&amp;#61;0x13eb0c8, num_assumptions&amp;#61;0, assumptions&amp;#61;0x1410410&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;solver&amp;#47;strategic_solver.cpp&amp;#58;364&lt;br /&gt;&amp;#35;24 0x0000000000a9d90c in strategic_solver&amp;#58;&amp;#58;check_sat &amp;#40;this&amp;#61;0x13eb0c8, num_assumptions&amp;#61;0, assumptions&amp;#61;0x1410410&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;solver&amp;#47;strategic_solver.cpp&amp;#58;382&lt;br /&gt;&amp;#35;25 0x0000000000a7870f in cmd_context&amp;#58;&amp;#58;check_sat &amp;#40;this&amp;#61;0x7fffffffe3b0, num_assumptions&amp;#61;0, assumptions&amp;#61;0x1410410&amp;#41; at third-party&amp;#47;z3&amp;#47;src&amp;#47;cmd_context&amp;#47;cmd_context.cpp&amp;#58;1294&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;&lt;br /&gt;Test case&amp;#58;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;&amp;#40;define-sort bv32 &amp;#40;&amp;#41; &amp;#40;_ BitVec 32&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-sort bv8 &amp;#40;&amp;#41; &amp;#40;_ BitVec 8&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-sort bv4 &amp;#40;&amp;#41; &amp;#40;_ BitVec 4&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-sort bv16 &amp;#40;&amp;#41; &amp;#40;_ BitVec 16&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;declare-fun pskb_addr_105_D0_108_D0_119_D36&amp;#33;131 &amp;#40;&amp;#41; bv32&amp;#41;&lt;br /&gt;&amp;#40;declare-fun pskb_addr_105_D0_108_D0_119_D36_131_D0&amp;#33;157 &amp;#40;&amp;#41; bv8&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;159 &amp;#40;&amp;#41; bv4 &amp;#40;&amp;#40;_ extract 3 0&amp;#41; pskb_addr_105_D0_108_D0_119_D36_131_D0&amp;#33;157&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;160 &amp;#40;&amp;#41; bv8 &amp;#40;&amp;#40;_ zero_extend 4&amp;#41; tmp&amp;#33;159&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;161 &amp;#40;&amp;#41; bv32 &amp;#40;&amp;#40;_ zero_extend 24&amp;#41; tmp&amp;#33;160&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;162 &amp;#40;&amp;#41; bv32 &amp;#40;bvshl tmp&amp;#33;161 &amp;#35;x00000002&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;declare-fun pskb_addr_105_D0_108_D0_119_D100&amp;#33;146 &amp;#40;&amp;#41; bv32&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;165 &amp;#40;&amp;#41; bv32 &amp;#40;bvsub pskb_addr_105_D0_108_D0_119_D100&amp;#33;146 tmp&amp;#33;162&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;166 &amp;#40;&amp;#41; bv16 &amp;#40;&amp;#40;_ extract 15 0&amp;#41; tmp&amp;#33;165&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;177 &amp;#40;&amp;#41; bv32 &amp;#40;&amp;#40;_ zero_extend 16&amp;#41; tmp&amp;#33;166&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;declare-fun tmp&amp;#33;200 &amp;#40;&amp;#41; bv16&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;201 &amp;#40;&amp;#41; bv4 &amp;#40;&amp;#40;_ extract 7 4&amp;#41; tmp&amp;#33;200&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;202 &amp;#40;&amp;#41; bv16 &amp;#40;&amp;#40;_ zero_extend 12&amp;#41; tmp&amp;#33;201&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;203 &amp;#40;&amp;#41; bv32 &amp;#40;&amp;#40;_ zero_extend 16&amp;#41; tmp&amp;#33;202&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;204 &amp;#40;&amp;#41; bv32 &amp;#40;bvshl tmp&amp;#33;203 &amp;#35;x00000002&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;define-fun tmp&amp;#33;207 &amp;#40;&amp;#41; Bool &amp;#40;&amp;#61; tmp&amp;#33;177 tmp&amp;#33;204&amp;#41;&amp;#41;&lt;br /&gt;&amp;#40;assert tmp&amp;#33;207&amp;#41;&lt;br /&gt;&amp;#40;check-sat&amp;#41;&lt;br /&gt;&amp;#96;&amp;#96;&amp;#96;&lt;br /&gt;&lt;br /&gt;What are the downstream consequences of this sort of assertion failure&amp;#63;  Are we just missing out on simplification opportunities, or is correctness at stake&amp;#63;&lt;br /&gt;&lt;br /&gt;Comments: Thanks for the speedy fix&amp;#33;</description><author>dvitek</author><pubDate>Wed, 05 Jun 2013 22:55:39 GMT</pubDate><guid isPermaLink="false">Commented Unassigned: assertion failure: i == 0 || !is_numeral(args[i]) in poly_simplifier_plugin::mk_mul [45] 20130605105539P</guid></item><item><title>Closed Unassigned: sparc64/solaris patch [39]</title><link>http://z3.codeplex.com/workitem/39</link><description>This patch makes z3&amp;#39;s code work on sparcv9 processors and similar when built using gcc.  It only addresses issues in the code and does not do anything about the build system &amp;#40;z3 is simple enough to build that it was easier to have our build system build it directly&amp;#41;.  The only special considerations w.r.t. building were using _AMD64_ &amp;#40;the name is a bit unfortunate&amp;#41;, disabling openmp, and linking with -lrt.&lt;br /&gt;&lt;br /&gt;The worst code issue was a SIGBUS in watch_list.h caused by an unaligned memory access.  The watch_list.cpp fix resolves this issue.&lt;br /&gt;&lt;br /&gt;The patch is against the end of the &amp;#34;master&amp;#34; branch.&lt;br /&gt;&lt;br /&gt;Comments: Patches were applied to contrib branch</description><author>leodemoura</author><pubDate>Wed, 05 Jun 2013 21:12:22 GMT</pubDate><guid isPermaLink="false">Closed Unassigned: sparc64/solaris patch [39] 20130605091222P</guid></item><item><title>Commented Unassigned: sparc64/solaris patch [39]</title><link>http://z3.codeplex.com/workitem/39</link><description>This patch makes z3&amp;#39;s code work on sparcv9 processors and similar when built using gcc.  It only addresses issues in the code and does not do anything about the build system &amp;#40;z3 is simple enough to build that it was easier to have our build system build it directly&amp;#41;.  The only special considerations w.r.t. building were using _AMD64_ &amp;#40;the name is a bit unfortunate&amp;#41;, disabling openmp, and linking with -lrt.&lt;br /&gt;&lt;br /&gt;The worst code issue was a SIGBUS in watch_list.h caused by an unaligned memory access.  The watch_list.cpp fix resolves this issue.&lt;br /&gt;&lt;br /&gt;The patch is against the end of the &amp;#34;master&amp;#34; branch.&lt;br /&gt;&lt;br /&gt;Comments: I applied the patch in the contrib branch.&amp;#10;Remark&amp;#58; the contrib branch is merged with the master branch before each official release.&amp;#10;See&amp;#58; http&amp;#58;&amp;#47;&amp;#47;research.microsoft.com&amp;#47;en-us&amp;#47;um&amp;#47;people&amp;#47;leonardo&amp;#47;blog&amp;#47;2012&amp;#47;11&amp;#47;19&amp;#47;external-contrib.html&amp;#10;for more information about the release process.</description><author>leodemoura</author><pubDate>Wed, 05 Jun 2013 21:07:58 GMT</pubDate><guid isPermaLink="false">Commented Unassigned: sparc64/solaris patch [39] 20130605090758P</guid></item></channel></rss>